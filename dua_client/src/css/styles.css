.header {
  color:  black;
  text-align: center;

}

.waiting {
  color: black;
  text-align: center;
}

.dua-btn {
  width: 150px;
  height: 40px;
  position: relative;
}

.quick-align{
  position: relative;
  left: 35%
}
.dua-general {
  display: grid;
  grid-auto-rows: 25%
}
.dua-setup {
  display: grid;
  grid-auto-rows: 30%
}

.submission-form {
  width: 100%;
  justify-content: center;
  text-align:center;
  padding-top:1em;
}

.id-textbox {
  border-radius:5%;
}

.test {
  height: 100vh;
  text-align:  center;
}

.view{
  height:  100%; 
}

.fullScreen{
  max-width:  100%;
  min-width: 100%;
  min-height: 100%;  
  width:  100%;
  height:  100%; 
  top:  0%;
  left:  0%;
  position: fixed; 
  transform: scale(100%);
/*   transform:  translate(50%,50%);   */
}

.player{
  margin: 0; 
  padding: 0;
/*   display: block; 
  flex-grow: 1;  */
  position: fixed;
  border: none;

}

.hidden{
  animation: fadeOut 0.5s linear forwards;
  pointer-events: none
}

.shown{
  animation: fadeIn 0.5s linear forwards;
  pointer-events: all;
}

.on{
  
}

.off{
  display: none;
}

/*---------------------------------------------------------------------------
  From: https://learn.microsoft.com/en-us/dual-screen/web/css-viewport-segments
  ---------------------------------------------------------------------------*/
.TestingDisplay{
  height: 100vh;
  display: flex;
  overflow: hidden;
}

.screen0{
   /* grow: no, shrink: no, basis: fold-left */
   flex: 0 0 env(viewport-segment-right 0 0);

   /* equals to margin-right when writing mode is left-to-right (english)  */
   /* equals to margin-left when writing mode is right-to-left (arabic, hebrew)  */
   /* this will prevent content from being rendered behind the device mask */
   transform: translate(0,2%);
   margin-inline-end: calc(env(viewport-segment-left 1 0) - env(viewport-segment-right 0 0)) ; /* hinge width */
   overflow: visible;
}

.screen1{
   /* fill the rest of the space */
    height: 100vh; 
    flex: 0;

   margin: 0;
   overflow: hidden;
}

/*----------------------------------------------------------------------------
  End 
------------------------------------------------------------------------------*/
.screen-holder{
  transform: scale(0.8) translate(0%,-7%);
  overflow: hidden;
  text-align: center;
  top: 100%;
  position: relative;
}

@keyframes fadeIn {
  0% { opacity: 0; }
  100% { opacity: 1; }
}
@keyframes fadeOut {
  0% { opacity: 1; }
  100% { opacity: 0; }
}

.screenLink {
  text-decoration: none;
}

.popup-content {
  margin: auto;
  background: rgb(255, 255, 255);
  width: 50%;
  padding: 5px;
}
.popup-arrow {
  color: rgb(255, 255, 255);
}
[role='tooltip'].popup-content {
  width: 200px;
  box-shadow: rgba(0, 0, 0, 0.16) 0px 0px 3px;
}

.popup-overlay {
  background: rgba(0, 0, 0, 0.5);
}
[data-popup='tooltip'].popup-overlay {
  background: transparent;
}


/*--------------------------------------------------------------------------------------

    Popup Modal guide - https://react-popup.elazizi.com/react-modal/

---------------------------------------------------------------------------------------*/
.modal {
  font-size: 12px;
}
.modal > .header {
  width: 100%;
  border-bottom: 1px solid gray;
  font-size: 18px;
  text-align: center;
  padding: 5px;
}
.modal > .content {
  width: 100%;
  padding: 10px 5px;
}
.modal > .actions {
  width: 100%;
  padding: 10px 5px;
  margin: auto;
  text-align: center;
}
.modal > .close {
  cursor: pointer;
  position: absolute;
  display: block;
  padding: 2px 5px;
  line-height: 20px;
  right: -10px;
  top: -10px;
  font-size: 24px;
  background: #ffffff;
  border-radius: 18px;
  border: 1px solid #cfcece;
}

.delete{
  border: 1px solid black;
}
